{"version":3,"sources":["app.js"],"names":["createError","require","express","cookieParser","session","path","sequelize","indexRouter","flash","projectsRouter","evaluationRouter","pmEvaluationRouter","managementRouter","taskRouter","app","connectionTesting","regeneratorRuntime","async","_context","prev","next","awrap","authenticate","sync","t0","then","error","stop","join","set","force","peerEvaluationRouter","console","log","err","use","logger","json","urlencoded","extended","__dirname","secret","resave","saveUninitialized","req","res","locals","currentUser","user","authorization","flashMessages","usersRouter","maxAge","message","get","status"],"mappings":"aACA,IAAIA,YAAcC,QAAQ,eAD1BC,QAAAD,QAAA,WACID,KAAAA,QAAcC,QAGdE,aAAeF,QAAQ,iBAFvBC,OAAOD,QAAU,UAIjBG,QAAUH,QAAQ,mBAHlBI,MAAOJ,QAAQ,0BAOGA,QAAQ,YAAtBK,mBAAAA,UAIJC,YAAcN,QAAQ,kBAPtBO,YAAQP,QAAQ,kBAShBQ,eAAiBR,QAAQ,qBACzBS,iBAAmBT,QAAQ,uBAC3BU,mBAR0BV,QAAD,0BAArBK,qBAAAA,QAS2B,4BAC/BM,iBAAmBX,QAAQ,uBAC3BY,WAAaZ,QAAQ,iBAIrBa,IAAMZ,UAeV,SAAea,oBAAf,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAAAJ,mBAAAK,MAXQf,UAAAgB,gBAWR,KAAA,EATAhB,QAAUiB,IAAK,iDASfL,EAAAE,KAAA,EAAA,MAAA,KAAA,EAAAF,EAAAC,KAAA,EAAAD,EAAAM,GAAAN,EAAA,MAAA,GARKO,QAAKC,MAAA,qCAALD,EAAAA,IAQL,KAAA,EAAA,IAAA,MAAA,OAAAP,EAAAS,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,KAvBAb,IAAIJ,IAAAA,QAAAA,KAAgBkB,KAAG3B,UAAQ,UAY/Ba,IAAIe,IAAI,cAAe,OAEvBvB,UAAUiB,KAAK,CAAEO,OAAO,IAZpBC,KAAAA,WAcIC,QAAQC,IAAI,kBAFpB,MAIW,SAACC,GAdRrB,QAAUa,MAAGzB,KAeT+B,oBAIRlB,IAAAqB,IAAAC,OAAerB,QAAfD,IAAAqB,IAAAjC,QAAAmC,QAAAvB,IAAAqB,IAAAjC,QAAAoC,WAAA,CAAAC,UAAA,KAAAzB,IAAAqB,IAAAhC,gBAAAW,IAAAqB,IAAAjC,QAAA,OAAAG,KAAAuB,KAAAY,UAAA,YAAA1B,IAAAqB,IAAAjC,QAAA,OAAAG,KAAAuB,KAAAY,UAAA,WAAA1B,IAAAqB,IAAA/B,QAAA,CAAAqC,OAAA,eAmBEC,QAAQ,EAnBVC,mBAAA,EAGIX,OAAAA,CAAAA,OAAQC,UAHZnB,IAAAqB,IAAA3B,SAKIwB,IAAAA,IAAAA,SAAOY,EAAClB,EAAMN,GAwBhByB,EAAIC,OAAOC,YAAcH,EAAIxC,QAAQ4C,KA7BvCH,EAAAC,OAAAG,cAAAL,EAAAxC,QAAA6C,cAAAJ,EAAAC,OAAAI,cAAAN,EAAApC,QAAAY,MAqCAN,IAAIqB,IAAI,IAAK5B,aA7BbQ,IAAAA,IAAAA,SAAiBoC,aA+BjBrC,IAAIqB,IAAI,YAAa1B,gBA5BrBK,IAAIqB,IAAIC,mBAARL,sBACAjB,IAAIqB,IAAIjC,iBAARS,oBACAG,IAAIqB,IAAIjC,cAAQoC,kBAAaC,IAAAA,IAAAA,cAAU3B,kBAAZE,IAA3BqB,IAAA,QAAAtB,YAIAC,IAAIqB,IAAI/B,SAAQwC,EAAAC,EAAAzB,GACdqB,EAAAA,YAAQ,QAGEW,IAAAA,IAAAA,SAAYlB,EAAKU,EAAKC,EAAAzB,GAkChCyB,EAAIC,OAAOO,QAAUnB,EAAImB,QAtC3BR,EAAAC,OAAApB,MAAA,gBAAAkB,EAAA9B,IAAAwC,IAAA,OAAApB,EAAA,GA0CEW,EAAIU,OAAOrB,EAAIqB,QAAU,KA/B3BzC,EAAIqB,OAAI,WAGNU,OAAIC,QAAOI","file":"app.min.js","sourcesContent":["// Import module\nvar createError = require('http-errors');\nvar express = require('express');\nvar path = require('path');\nvar cookieParser = require('cookie-parser');\nvar logger = require('morgan');\nvar session = require('express-session');\nvar flash = require('connect-flash');\n\n//Import Model\nconst { sequelize } = require('./models');\n\n\n// Import Router\nvar indexRouter = require('./routes/index');\nvar usersRouter = require('./routes/users');\nvar projectsRouter = require('./routes/projects');\nvar evaluationRouter = require('./routes/evaluation');\nvar pmEvaluationRouter = require('./routes/pm_evaluation');\nvar peerEvaluationRouter = require('./routes/peer_evaluation');\nvar managementRouter = require('./routes/management');\nvar taskRouter = require('./routes/task');\n\n\n// Use express\nvar app = express();\n\n// view engine setup\napp.set('views', path.join(__dirname, 'views'));\napp.set('view engine', 'pug');\n\nsequelize.sync({ force: false })\n    .then(() => {\n        console.log(\"데이터베이스 연결 성공\");\n    })\n    .catch((err) => {\n        console.error(err);\n    });\n\n// database connection\nasync function connectionTesting() {\n  try {\n    await sequelize.authenticate();\n    console.log('Connection has been established successfully.');\n  } catch (error) {\n    console.error('Unable to connect to the database:', error);\n  }\n}\nconnectionTesting();\n\n// Use Middleware\napp.use(logger('dev'));\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\napp.use(cookieParser());\napp.use(express.static(path.join(__dirname, 'public')));\napp.use(express.static(path.join(__dirname, 'front')));\napp.use(session({\n  secret: 'keyboard cat',\n  resave: true,\n  saveUninitialized: true,\n  cookie: { maxAge: 24* 60 * 60 * 1000 } // 24 hours\n}));\napp.use(flash());\n\n// app.use(passport.initialize());\n// app.use(passport.session());\n\napp.use(function(req, res, next) {\n  res.locals.currentUser = req.session.user;\n  res.locals.authorization = req.session.authorization;\n  res.locals.flashMessages = req.flash();\n  next();\n});\n\n\n// Connection Router\napp.use('/', indexRouter);\napp.use('/users', usersRouter);\napp.use('/projects', projectsRouter);\napp.use('/peer_evaluation', peerEvaluationRouter);\napp.use('/pm_evaluation', pmEvaluationRouter);\napp.use('/evaluation', evaluationRouter);\napp.use('/management', managementRouter);\napp.use('/task', taskRouter);\n\n\n// catch 404 and forward to error handler\napp.use(function(req, res, next) {\n  next(createError(404));\n});\n\n// error handler\napp.use(function(err, req, res, next) {\n  // set locals, only providing error in development\n  res.locals.message = err.message;\n  res.locals.error = req.app.get('env') === 'development' ? err : {};\n\n  // render the error page\n  res.status(err.status || 500);\n  res.render('error');\n});\n\nmodule.exports = app;\n"]}