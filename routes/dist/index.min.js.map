{"version":3,"sources":["index.js"],"names":["express","require","router","Router","Skill","Project","Employee","bcrypt","EmpSkill","password","hash","catchErrors","compare","validateForm","form","name","id","generateHash","length","comparePassword","getDday","end","today","Date","getFullYear","month","getMonth","day","getDate","dateArray","split","end_date","get","req","res","next","render","skills","regeneratorRuntime","async","_context","prev","awrap","findAll","sent","stop","user","pwd","education","work_experience","emp_no","userSkills","_context2","session","authorization","json","message","findOne","authorization_no","include","model","where","concat","attributes","route","projects","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","project","d_day","_context3","console","log","body","ID","abrupt","redirect","as","undefined","value","dataValues","flash","project_name","t0","finish","skill","post","err","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","_context4","create","PWD","dept_no","department","Symbol","iterator","done","skill_no","state","title","module","exports"],"mappings":"aAAA,IAAIA,QAAUC,QAAQ,WAClBC,OAASF,QAAQG,SADjBH,SAAUC,QAAQ,sBAGlBG,MAAQH,QAAQ,mBAFhBC,SAASF,QAAQG,uBAIjBE,QAAUJ,QAAQ,qBAHlBK,YAAWL,QAAQ,sBAKnBM,OAASN,QAAQ,UAJjBG,KAAQH,QAAQ,6BACpB,SAAIO,aAAkBC,GAOlB,OAAOF,OAAOG,KAAKD,EAAU,IALjC,SAAME,gBAAqBF,EAACC,GASxB,OAAOH,OAAOK,QAAQH,EAAUC,GAPpC,SAAUG,aAAWC,GAWjB,IAAIC,EAAOD,EAAKC,MAAQ,GAT5BC,EAASC,EAAAA,IAAaR,GAClBA,EAAcC,EAAKD,UAAnB,GAYA,OAAKM,EAIDA,EAAKG,OAAS,EATbL,sBAGDJ,EAIHA,EAQAA,EAAAS,OAAA,EAWU,yBALX,KAHW,gBAJA,cAlBNC,cAoCT,SAASC,QAAQC,GACb,IAAIC,EAAQ,IAAIC,KARZd,EAASS,EAATM,cACAC,EAAOH,EAAAI,WAAP,EACHC,EAAAL,EAAAM,UAaGC,EAXJR,EAAAS,MAAA,KACH,GAU4BA,MAAM,KAP/B,OAAIR,GAAQO,EAAZ,IACQJ,GAASD,EAAN,IAUAK,EAAU,GAAKF,GAAO,EATfD,EAAa,GAAIC,EAI/BI,KAIA7B,OAAA8B,IAAGP,IAAK,SAAaQ,EAAKC,EAAAC,GACtBD,EAAAE,OAAGP,QAAA,CAAeF,MAAlB,YAGHzB,OAAA8B,IAAA,UAAArB,YAAA,SAAAsB,EAAAC,GAAA,IAAAG,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAL,MAAA,KAAA,EAAA,OAAAK,EAAAL,KAAA,EAAAG,mBAAAI,MACJtC,MAAAuC,WADI,KAAA,EACJN,EADIG,EAAAI,KAaLV,EAAIE,OAAO,SAAU,CAACC,OAAQA,IAbzB,KAAA,EAAA,IAAA,MAAA,OAAAG,EAAAK,aAMT3C,OAAA8B,IAAA,UAAA,SAAAC,EAAAC,GAAA,IAAAY,EAAA9B,EAAA+B,EAAAC,EAAAjC,EAAAkC,EAAAC,EAAAC,EAAA,OAAAb,mBAAAC,MAAA,SAAAa,GAAA,OAAA,OAAAA,EAAAX,KAAAW,EAAAjB,MAAA,KAAA,EAAA,OAWSF,EAAIoB,QAAQC,eAAepB,EAAIqB,KAAK,CAAEC,QAAS,qBAXxDJ,EAAAjB,KAAA,EAAAG,mBAAAI,MAYuBpC,SAASmD,QAAQ,CAXjCzB,MAAP,CAAgB0B,iBAAAzB,EAAoBE,QAAMmB,kBAD1C,KAAA,EAAA,OAYUR,EAZVM,EAAAR,KAEiC5B,EAAA8B,EAAA9B,GAAA+B,EAAAD,EAAAC,IAAAC,EAAAF,EAAAE,UAAAjC,EAAA+B,EAAA/B,KAAAkC,EAAAH,EAAAG,gBAAAC,EAAAJ,EAAAI,OAFjCE,EAAAjB,KAAA,EAAAG,mBAAAI,MAEItC,MAAAuC,QAAA,CADJgB,QAAA,CAIW,CAAuBC,MAAApD,SAAAqD,MAAA,CAAA,YAAAC,OAAAZ,MAAAa,WAAA,CAAA,iBALlC,KAAA,EAEIZ,EAFJC,EAAAR,KAKkCV,EAAAqB,KAAA,CAqB1BvC,GAAAA,EArB0B+B,IAAAA,EACxBV,UAAAA,EACNH,MAAIE,EAAkBC,KAAAA,EAADY,gBAAAA,IAPzB,KAAA,EAAA,IAAA,MAAA,OAAAG,EAAAP,YAKkC3C,OAAA8D,MAAA,WAAAhC,IAAA,SAAAC,EAAAC,GAAAA,EAAAE,OAAA,SAAA,MAKlClC,KAAsBS,YAAA,SAAAsB,EAAAC,GAAA,IAAAY,EAAAmB,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAlC,mBAAAC,MAAA,SAAAkC,GAAA,OAAA,OAAAA,EAAAhC,KAAAgC,EAAAtC,MAAA,KAAA,EAAA,OAAAuC,QAAAC,IAAA1C,EAAA2C,MAAAH,EAAAtC,KAAA,EAAAG,mBAAAI,MAAApC,SAAAmD,QAAA,CAAAI,MAAA,CAAAgB,GAAA5C,EAAA2C,KAAA5D,OAAA,KAAA,EAAA,GAAA8B,EAAA2B,EAAA7B,KAAA,CAAA6B,EAAAtC,KAAA,EAAA,MAAA,OACbF,EAAIoB,MAAJ,SAAYC,mBADCmB,EAAAK,OAAA,SACkC5C,EAAA6C,SAAA,SADlC,KAAA,EAAA,OAAAN,EAAAtC,KAAA,EAAAG,mBAAAI,MAAArC,QAECC,QAASmD,CACxBI,MAAO,CAAEH,MAAAA,OAHKC,QAAA,CA6CF,CA7CEC,MAAAtD,SAAA0E,GAAA,cAKNjC,QAAkDD,CAL5Ce,MAAA,CAAAX,OAAAJ,EAAAI,cAAA,KAAA,EAada,IAbcE,EAAAQ,EAAA7B,KAAAuB,IAAAD,GAAA,GAAAE,OAAAa,EAAAR,EAAAhC,KAAA,GAadsB,EAAaE,EAAbF,OAAAA,cAAAA,GAAAA,EAAAA,EAAAA,QAAAA,MAAAA,GAAAA,EAAAA,EAAYO,EAAAY,OAbEV,EAAApD,QAAAmD,EAAAY,WAAApD,YAAAE,EAAAmD,MAAA,UAAA,GAAAtB,OAAAS,EAAAc,aAAA,kBAAAvB,OAAAU,EAAA,aAAAC,EAAAtC,KAAA,GAAA,MAAA,KAAA,GAAAsC,EAAAhC,KAAA,GAAAgC,EAAAa,GAAAb,EAAA,MAAA,IAAAN,GAAA,EAAAC,EAAAK,EAAAa,GAAA,KAAA,GAAAb,EAAAhC,KAAA,GAAAgC,EAAAhC,KAAA,GAAAyB,GAAA,MAAAG,EAAA,QAAAA,EAAA,SAAA,KAAA,GAAA,GAAAI,EAAAhC,KAAA,GAAA0B,EAAA,MAAAC,EAAAK,EAAAtC,KAAA,GAAA,MAAA,KAAA,GAAA,OAAAsC,EAAAc,OAAA,IAAA,KAAA,GAAA,OAAAd,EAAAc,OAAA,IAAA,KAAA,GAAA,OAiBdxC,EAAGM,QAFEP,KAAAA,EAGLE,EAAAA,QAAAA,cAHKF,EAAAY,iBAIL8B,EAAAA,MAAOrC,UAAPqC,GAAAA,OAJK1C,EAAA/B,KAILyE,aAnBcf,EAAAK,OAAA,SAoBd/D,EALKgE,SAAA,MAfS,KAAA,GAAA,IAAA,MAAA,OAAAN,EAAA5B,SAAA,KAAA,KAAA,CAAA,CAAA,GAAA,GAAA,GAAA,IAAA,CAAA,GAAA,CAAA,GAAA,SAAA3C,OAAAuF,KAAA,UAAA9E,YAAA,SAAAsB,EAAAC,GAAA,IAAAwD,EAAA5C,EAAArC,EAAAkF,EAAAC,EAAAC,EAAAC,EAAAC,EAAAP,EAAA,OAAAlD,mBAAAC,MAAA,SAAAyD,GAAA,OAAA,OAAAA,EAAAvD,KAAAuD,EAAA7D,MAAA,KAAA,EAAA,GAAAuC,QAAAC,IAAA1C,EAAA2C,MAAAc,EAAA7E,aAAAoB,EAAA2C,MAAA,OAAA3C,EAAAmD,MAAA,SAAAM,GAAAM,EAAAlB,OAAA,SAAtB5C,EAAA6C,SAAA,SAAsBiB,EAAA7D,KAAA,EAAA,MAAA,KAAA,EAAA,OAAA6D,EAAA7D,KAAA,EAAAG,mBAAAI,MA+BFpC,SAAAmD,QAAOxB,CAAAA,MAAP,CAAiBE,GAAjBF,EAAA2C,KAAA5D,OA/BE,KAAA,EAAA,GA+BdL,EA/BcqF,EAAApD,KAAA,OA+BFX,EAAAmD,MAAA,SAAA,mBA/BEY,EAAAlB,OAAA,SA+BF5C,EAAA6C,SAAA,SA/BEiB,EAAA7D,KAAA,GAAA,MAAA,KAAA,GAAA,OAAA6D,EAAA7D,KAAA,GAAAG,mBAAAI,MAgCKzB,aAAfgB,EAAA2C,KAAAnE,WAhCU,KAAA,GAAA,OAgCViE,EAhCUsB,EAAApD,KAAAoD,EAAA7D,KAAA,GAAAG,mBAAAI,MA+BFpC,SAAA2F,OAAA,CAG8BpC,KAAAA,EAAKe,KAAE7D,KAAE8D,GAAAA,EAAED,KAAK5D,GAATkF,IAAAzF,EAAT0F,QAH5BlE,EAAA2C,KAAAwB,WA6DZ1C,iBAAkB,KA7DNV,UAAAf,EAAA2C,KAAA5B,UAGFF,gBAHE,QA/BE,KAAA,GA+BFA,EA/BEkD,EAAApD,KAAAgD,IAAAD,GAAA,GAAAE,OAAAZ,EAAAe,EAAAvD,KAAA,GAAAqD,EA+BF7D,EAAA2C,KAAAvC,OA/BEgE,OAAAC,YAAA,KAAA,GAAA,GAAAX,GAAAI,EAAAD,EAAA3D,QAAAoE,KAAA,CAAAP,EAAA7D,KAAA,GAAA,MAAA,OA+BFqD,EA/BEO,EAAAb,MAAAc,EAAA7D,KAAA,GAAAG,mBAAAI,MA+BFlC,SAAAyF,OAAA,CAAA/C,OAAAJ,EAAAI,OAqERsD,SAAUhB,KApGA,KAAA,GAAAG,GAAA,EAAAK,EAAA7D,KAAA,GAAA,MAAA,KAAA,GAAA6D,EAAA7D,KAAA,GAAA,MAAA,KAAA,GAAA6D,EAAAvD,KAAA,GAAAuD,EAAAV,GAAAU,EAAA,MAAA,IAAAJ,GAAA,EAAAC,EAAAG,EAAAV,GAAA,KAAA,GAAAU,EAAAvD,KAAA,GAAAuD,EAAAvD,KAAA,GAAAkD,GAAA,MAAAG,EAAA,QAAAA,EAAA,SAAA,KAAA,GAAA,GAAAE,EAAAvD,KAAA,GAAAmD,EAAA,MAAAC,EAAAG,EAAA7D,KAAA,GAAA,MAAA,KAAA,GAAA,OAAA6D,EAAAT,OAAA,IAAA,KAAA,GAAA,OAAAS,EAAAT,OAAA,IAAA,KAAA,GA+BFtD,EAAAmD,MAAA,UAAA,oBAAAlD,EAAA6C,SAAA,KA/BE,KAAA,GAAA,IAAA,MAAA,OAAAiB,EAAAnD,SAAA,KAAA,KAAA,CAAA,CAAA,GAAA,GAAA,GAAA,IAAA,CAAA,GAAA,CAAA,GAAA,SA0CF4D,OAAAA,IAAAA,WAAO,SAAAxE,EAAAC,EAAAC,UADJF,EAD4BoB,QAAAP,KAInCa,EAAAA,MAAAA,UACI,qBACIC,EAAAA,SAAAA,OAGIC,OAAAA,IAAAA,QAAAA,SAAO5B,EAAAC,EAAAC,GAAEe,EAAAA,OAAAA,SAAM,CAAEJ,MAAKI,UAAAA,KAAAA,aAkHlDhD,OAAO8B,IAAI,SAAU,SAAUC,EAAKC,EAAKC,GApIrBD,EAAAE,OAAA,SAAA,CAAAsE,MAAA,cAAAxG,OAAA8B,IAAA,iBAAA,SAAAC,EAAAC,EAAAC,GA0IhBD,EAAIE,OAAO,cAAe,CAAEsE,MAAO,cAzG3BzE,OAAAA,IAAAA,kBAAA,SAAAA,EAA4BC,EAA5BC,GAjCQD,EAAAE,OAAA,iBAAA,CAAAsE,MAAA,cAAAxG,OAAA8B,IAAA,cAAA,SAAAC,EAAAC,EAAAC,GAAAD,EAAAE,OAAA,aAAA,CAAAsE,MAAA,cAsCpBxG,OAAOuF,IAAP,UAAA,SAAuB9E,EAAYuB,EAAAC,GAAAD,EAAAE,OAAA,oBAAA,CAAAsE,MAAA,cAAAxG,OAAA8B,IAAA,iBAAA,SAAAC,EAAAC,EAAAC,GAAAD,EAAAE,OAAA,uBAAA,CAAAsE,MAAA,cAAAxG,OAAA8B,IAAA,kCAAA,SAAAC,EAAAC,EAAAC,GAAAD,EAAAE,OAAA,iCAAA,CAAAsE,MAAA,cAK3BzE,OAAAA,IAAAA,uCAAA,SAAAA,EAAAC,EAAAC,GAL2BD,EAAAE,OAAA,sCAMhB2C,CAAAA,MAAS,cANO7E,OAAA8B,IAAA,8BASd1B,SAASmD,EAAAA,EAAQtB,GAAE0B,EAAAA,OAAAA,6BAAO,CAAA6C,MAAA,cAkI/CxG,OAAO8B,IAAI,mCAAoC,SAASC,EAAKC,EAAKC,GA3I/BD,EAAAE,OAAA,kCAAA,CAAAsE,MAAA,cAAAxG,OAAA8B,IAAA,4BAAA,SAAAC,EAAAC,EAAAC,GAAAD,EAAAE,OAAA,2BAAA,CAAAsE,MAAA,cAAAxG,OAAA8B,IAAA,iCAapBE,SAAI6C,EAAS7C,EAbOC,GAsJjCD,EAAIE,OAAO,gCAAiC,CAAEsE,MAAO,cAIvDxG,OAAO8B,IAAI,kCAAmC,SAASC,EAAKC,EAAKC,GA1J9BD,EAAAE,OAAA,iCAAA,CAAAsE,MAAA,cAmB3B3F,OAAAA,IAAAA,uCADyB,SAAAkB,EAAAC,EAAAC,GAEzB0C,EAAAA,OAAAA,sCAFyB,CAAA6B,MAAA,cAMzB1D,OAAAA,IAAAA,wCANyB,SAAAf,EAAAC,EAAAC,GAOzBc,EAAAA,OAAAA,uCAAiB,CAAAyD,MAAA,cAPrB5D,OAAAA,IAAAA,oCAlB+B,SAAAb,EAAAC,EAAAC,GAAAD,EAAAE,OAAA,mCAAA,CAAAsE,MAAA,cAAAxG,OAAA8B,IAAA,uCAAA,SAAAC,EAAAC,EAAAC,GA+K/BD,EAAIE,OAAO,sCAAuC,CAAEsE,MAAO,cA/K5BxG,OAAA8B,IAAA,kCAAA,SAAAC,EAAAC,EAAAC,GAAAD,EAAAE,OAAA,iCAAA,CAAAsE,MAAA,cAAAxG,OAAA8B,IAAA,4BAAA,SA6BrBxB,EAASyF,EAAO9D,GAClBe,EAAAA,OAAAA,2BADkB,CAAAwD,MAAA,cA7BKxG,OAAA8B,IAAA,8BAAA,SAAAC,EAAAC,EAAAC,GAAAD,EAAAE,OAAA,6BAAA,CAAAsE,MAAA,cAAAxG,OAAA8B,IAAA,gBAAA,SAAAC,EAAAC,EAAAC,GAAAD,EAAAE,OAAA,eAAA,CAAAsE,MAAA,cAAAxG,OAAA8B,IAAA,eAAA,SAAAC,EAAAC,EAAAC,GAAAD,EAAAE,OAAA,cAAA,CAAAsE,MAAA,cAAAxG,OAAA8B,IAAA,mBAAA,SAAAC,EAAAC,EAAAC,GAAAD,EAAAE,OAAA,kBAAA,CAAAsE,MAAA,cAAAxG,OAAA8B,IAAA,kBAAA,SAAAC,EAAAC,EAAAC,GAAAD,EAAAE,OAAA,iBAAA,CAAAsE,MAAA,cAsNnCxG,OAAO8B,IAAI,qBAAsB,SAAUC,EAAKC,EAAKC,GAtNlBD,EAAAE,OAAA,oBAAA,CAAAsE,MAAA,cA2NnCxG,OAAO8B,IAAI,aAAc,SAAUC,EAAKC,EAAKC,GA3NVD,EAAAE,OAAA,YAAA,CAAAsE,MAAA,cAgOnCxG,OAAO8B,IAAI,mBAAoB,SAAUC,EAAKC,EAAKC,GAhOhBD,EAAAE,OAAA,kBAAA,CAAAsE,MAAA,cAAAC,OAAAC,QAAA1G","file":"index.min.js","sourcesContent":["var express = require(\"express\");\nvar router = express.Router();\nvar Employee = require(\"../models/employee\");\nvar Skill = require(\"../models/skill\");\nvar EmpSkill = require(\"../models/emp_skill\");\nvar Project = require('../models/project');\nconst catchErrors = require(\"../lib/async-error\");\nvar bcrypt = require(\"bcrypt\");\nconst Peer = require(\"../models/peer_evaluation\");\n\nfunction generateHash(password) {\n    return bcrypt.hash(password, 10);\n}\n\nfunction comparePassword(password, hash) {\n    return bcrypt.compare(password, hash);\n}\n\nfunction validateForm(form) {\n    var name = form.name || \"\";\n    var id = form.id || \"\";\n    var password = form.password || \"\";\n\n    if (!name) {\n        return \"이름을 입력해주세요.\";\n    }\n\n    if (name.length < 2) {\n        return \"이름은 두 글자 이상 입력해주세요.\";\n    }\n\n    if (!id) {\n        return \"ID를 입력해주세요.\";\n    }\n\n    if (!password) {\n        return \"비밀번호를 입력해주세요.\";\n    }\n\n    // if (password !== password_confirmation) {\n    //   return '비밀번호가 일치하지 않습니다.';\n    // }\n\n    if (password.length < 7) {\n        return \"비밀번호가 너무 짧습니다. (8자 이상)\";\n    }\n\n    return null;\n}\n\nfunction getDday(end) {\n    let today = new Date();\n    let year = today.getFullYear(); // 년도\n    let month = today.getMonth() + 1;  // 월\n    let day = today.getDate();  // 날짜\n\n    var endArray = end.split(\" \");\n    var end_date = endArray[0];\n    var dateArray = end_date.split(\"-\");\n\n    if(year == dateArray[0]) {\n        if(month == dateArray[1]) {\n            if(dateArray[2] - day <= 7) {\n                return dateArray[2] - day;\n            }\n        }\n    }\n\n    return null;\n}\n\n/* GET index listing. */\nrouter.get(\"/\", function (req, res, next) {\n    res.render(\"index\", { title: \"Index\" });\n});\n\nrouter.get(\"/signup\", catchErrors(async (req, res, next) => {\n    const skills = await Skill.findAll();\n    res.render(\"signup\", {skills: skills});\n}));\n\nrouter.get(\"/mypage\", async (req, res) => {\n    if (!req.session.authorization) res.json({ message: \"you should login\" });\n    const user = await Employee.findOne({\n        where: { authorization_no: req.session.authorization },\n    });\n    const { id, pwd, education, name, work_experience, emp_no } = user;\n    const userSkills = await Skill.findAll({\n        include: [\n            {\n                model: EmpSkill,\n                where: [`emp_no = ${emp_no}`],\n            },\n        ],\n        attributes: [\"skill_name\"],\n    });\n    res.json({\n        id,\n        pwd,\n        education,\n        skill: userSkills,\n        name,\n        work_experience,\n    });\n});\n\nrouter.route(\"/signin\")\n    .get((req, res) => {\n        res.render(\"signin\", {});\n    })\n\n    .post(\n        catchErrors(async (req, res, next) => {\n            console.log(req.body);\n\n            const user = await Employee.findOne({ where: { ID: req.body.id } });\n            if (!user) {\n                req.flash(\"danger\", \"존재하지 않는 ID 입니다.\");\n                return res.redirect(\"back\");\n            }\n\n            const projects = await Project.findAll({\n                where: {\n                    state: '진행중'\n                },\n                include: [\n                    {    \n                        model: Employee,\n                        as: 'project_emp',\n                        through: {\n                            where: { emp_no: user.emp_no }\n                        }\n                    }\n                ]\n            }); \n\n            for(let project of projects) {\n                var d_day = getDday(project.dataValues.end_date);\n                if(d_day) {\n                    req.flash(\"warning\", `${project.project_name} 프로젝트의 마감일자까지 ${d_day}일 남았습니다.`);\n                }\n            }\n            \n            req.session.user = user;\n            req.session.authorization = user.authorization_no;\n            req.flash(\"success\", `${user.name}님 환영합니다!`);\n            return res.redirect(\"/\");\n        })\n    );\n\nrouter.post(\"/signup\", catchErrors(async (req, res, next) => {\n    console.log(req.body);\n\n    var err = validateForm(req.body);\n    if (err) {\n        req.flash(\"danger\", err);\n        return res.redirect(\"back\");\n    }\n\n    var user = await Employee.findOne({ where: {ID: req.body.id} });\n\n    if (user) {\n        req.flash(\"danger\", \"이미 존재하는 ID 입니다.\");\n        return res.redirect(\"back\");\n    }\n\n    var password = await generateHash(req.body.password);\n\n    user = await Employee.create({\n        name: req.body.name,\n        ID: req.body.id,\n        PWD: password,\n        dept_no: req.body.department,\n        authorization_no: null,\n        education: req.body.education,\n        work_experience: null\n    });\n\n    for(let skill of req.body.skills) {\n        await EmpSkill.create({\n            emp_no: user.emp_no,\n            skill_no: skill\n        });\n    }\n\n    req.flash(\"success\", \"정상적으로 회원가입되었습니다.\");\n    res.redirect(\"/\");\n}));\n\nrouter.get(\"/signout\", (req, res, next) => {\n    delete req.session.user;\n    req.flash(\"success\", \"정상적으로 로그아웃 되었습니다.\");\n    res.redirect(\"/\");\n});\n\nrouter.get(\"/test\", function (req, res, next) {\n    res.render(\"index2\", { title: \"Express\", name: \"han sh\" });\n});\n\n// router.get(\"/project/:id\", (req, res) => {\n//     const { id } = req.params;\n//     if (!req.session.authorization) res.json({ message: \"you should login\" });\n//     const user = await Employee.findOne({\n//         where: { id },\n//     });\n//     let total = 0;\n//     const scores = await Peer.findAll({\n//         where: {\n//             evaluation_no: user.emp_no,\n//         },\n//     });\n\n//     scores.forEach((val) => {\n//         total += val.evaluation_score1;\n//         total += val.evaluation_score2;\n//     });\n\n//     res.json({\n//         total,\n//         average: total / (scores.length * 2),\n//     });\n// });\n\n// router.get(\"/project\", (req, res) => {\n//     let max = -1;\n//     let index = -1;\n//     const scores = await Peer.findAll({});\n//     scores.forEach((val, i) => {\n//         const temp = val.evaluation_score1 + val.evaluation_score2;\n//         if (max < temp) index = i;\n//     });\n//     const user = await Employee.findOne({\n//         where: { emp_no: scores[index].evaluation_no },\n//     });\n\n//     res.json(user);\n// });\n\n// // mypage router 사용\n// const mypage = require(\"./routes/mypage\");\n// express().use(\"/mypage\", mypage);\n\n\n/*회원가입 화면*/\nrouter.get(\"/test3\", function (req, res, next) {\n    res.render(\"signup\", { title: \"Express\" });\n});\n\n/*nav_개발자*/\nrouter.get(\"/nav_developer\", function (req, res, next) {\n    res.render(\"nav_develop\", { title: \"Express\" });\n});\n\n/*nav_경영진*/\nrouter.get(\"/nav_management\", function (req, res, next) {\n    res.render(\"nav_management\", { title: \"Express\" });\n});\n\n/*프로젝트 등록 페이지*/\nrouter.get(\"/addproject\", function (req, res, next) {\n    res.render(\"addProject\", { title: \"Express\" });\n});\n\n/*마이페이지*/\nrouter.get(\"/mypage\", function (req, res, next) {\n    res.render(\"mypage/mypageview\", { title: \"Express\" });\n});\n\n/*개인정보 수정*/\nrouter.get(\"/myprofileedit\", function (req, res, next) {\n    res.render(\"mypage/myProfileEdit\", { title: \"Express\" });\n});\n\n/*고객평가 해당 직원 리스트 페이지*/\nrouter.get('/evaluation/customer_evaluation', function(req, res, next){\n  res.render('evaluation/customer_evaluation', { title: 'Express' });\n});\n\n/*고객평가 입력페이지*/\nrouter.get('/evaluation/inputCustomer_evaluation', function(req, res, next){\n  res.render('evaluation/inputCustomer_evaluation', { title: 'Express' });\n});\n\n/*동료평가 해당 직원 리스트 페이지*/\nrouter.get('/evaluation/peer_evaluation', function(req, res, next){\n  res.render('evaluation/peer_evaluation', { title: 'Express' });\n});\n\n/*동료평가 입력페이지*/\nrouter.get('/evaluation/inputPeer_evaluation', function(req, res, next){\n  res.render('evaluation/inputPeer_evaluation', { title: 'Express' });\n});\n\n/*PM평가 해당 직원 리스트 페이지*/\nrouter.get('/evaluation/pm_evaluation', function(req, res, next){\n  res.render('evaluation/pm_evaluation', { title: 'Express' });\n});\n\n/*PM평가 입력페이지*/\nrouter.get('/evaluation/inputPm_evaluation', function(req, res, next){\n  res.render('evaluation/inputPm_evaluation', { title: 'Express' });\n});\n\n/*고객평가 해당 직원 리스트 페이지*/\nrouter.get('/evaluation/customer_evaluation', function(req, res, next){\n  res.render('evaluation/customer_evaluation', { title: 'Express' });\n});\n\n/*고객평가 입력페이지*/\nrouter.get('/evaluation/inputCustomer_evaluation', function(req, res, next){\n  res.render('evaluation/inputCustomer_evaluation', { title: 'Express' });\n});\n\n/*고객평가서 항목 수정페이지*/\nrouter.get('/evaluation/modification_customerEval', function(req, res, next){\n    res.render('evaluation/modification_customerEval', { title: 'Express' });\n  });\n\n/*업무능력서 항목 수정페이지*/\nrouter.get('/evaluation/modification_peerEval', function(req, res, next){\n    res.render('evaluation/modification_peerEval', { title: 'Express' });\n  });\n\n/*특정직원의 동료,pm,peer평가 결과(점수,합계,평균)를 확인하는 페이지*/\nrouter.get('/management/evaluationResult_inquiry', function(req, res, next){\n    res.render('management/evaluationResult_inquiry', { title: 'Express' });\n  });\n\n/*특정직원의 고객평가 상세결과 페이지*/\nrouter.get('/evaluation/resultCustomer_eval', function(req, res, next){\n    res.render('evaluation/resultCustomer_eval', { title: 'Express' });\n  });\n\n/*특정직원의 PM평가 상세결과 페이지*/\nrouter.get('/evaluation/resultPm_eval', function(req, res, next){\n    res.render('evaluation/resultPm_eval', { title: 'Express' });\n  });\n\n/*특정직원의 동료평가 상세결과 페이지*/\nrouter.get('/evaluation/resultPeer_eval', function(req, res, next){\n    res.render('evaluation/resultPeer_eval', { title: 'Express' });\n  });\n\n/*project list*/\nrouter.get(\"/project/list\", function (req, res, next) {\n    res.render(\"project/list\", { title: \"Express\" });\n});\n\n/*project create*/\nrouter.get(\"/project/new\", function (req, res, next) {\n    res.render(\"project/new\", { title: \"Express\" });\n});\n\n/*project details*/\nrouter.get(\"/project/details\", function (req, res, next) {\n    res.render(\"project/details\", { title: \"Express\" });\n});\n\n/*project modify*/\nrouter.get(\"/project/modify\", function (req, res, next) {\n    res.render(\"project/modify\", { title: \"Express\" });\n});\n\n/*project task*/\nrouter.get(\"/project/checkTask\", function (req, res, next) {\n    res.render(\"project/checkTask\", { title: \"Express\" });\n});\n\n/*add Client*/\nrouter.get(\"/addclient\", function (req, res, next) {\n    res.render(\"addclient\", { title: \"Express\" });\n});\n\n/*add Task*/\nrouter.get(\"/project/addTask\", function (req, res, next) {\n    res.render(\"project/addTask\", { title: \"Express\" });\n});\n\nmodule.exports = router;\n"]}