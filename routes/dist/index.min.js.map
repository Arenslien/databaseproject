{"version":3,"sources":["index.js"],"names":["express","require","router","Router","Skill","Project","Employee","bcrypt","generateHash","password","EmpSkill","comparePassword","hash","catchErrors","validateForm","form","name","id","length","getDday","end","year","today","getFullYear","month","getMonth","day","getDate","dateArray","split","get","res","next","render","title","req","skills","regeneratorRuntime","async","_context","prev","awrap","findAll","sent","stop","user","pwd","education","work_experience","emp_no","userSkills","_context2","session","authorization","json","message","authorization_no","model","where","concat","attributes","route","post","projects","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","project","d_day","_context3","console","log","body","findOne","ID","flash","abrupt","redirect","state","include","through","undefined","Symbol","iterator","done","value","dataValues","end_date","project_name","t0","finish","skill","err","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","_context4","create","PWD","dept_no","department","as","module","exports"],"mappings":"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","file":"index.min.js","sourcesContent":["var express = require(\"express\");\nvar router = express.Router();\nvar Employee = require(\"../models/employee\");\nvar Skill = require(\"../models/skill\");\nvar EmpSkill = require(\"../models/emp_skill\");\nvar Project = require('../models/project');\nconst catchErrors = require(\"../lib/async-error\");\nvar bcrypt = require(\"bcrypt\");\n\nfunction generateHash(password) {\n    return bcrypt.hash(password, 10);\n}\n\nfunction comparePassword(password, hash) {\n    return bcrypt.compare(password, hash);\n}\n\nfunction validateForm(form) {\n    var name = form.name || \"\";\n    var id = form.id || \"\";\n    var password = form.password || \"\";\n\n    if (!name) {\n        return \"이름을 입력해주세요.\";\n    }\n\n    if (name.length < 2) {\n        return \"이름은 두 글자 이상 입력해주세요.\";\n    }\n\n    if (!id) {\n        return \"ID를 입력해주세요.\";\n    }\n\n    if (!password) {\n        return \"비밀번호를 입력해주세요.\";\n    }\n\n    // if (password !== password_confirmation) {\n    //   return '비밀번호가 일치하지 않습니다.';\n    // }\n\n    if (password.length < 7) {\n        return \"비밀번호가 너무 짧습니다. (8자 이상)\";\n    }\n\n    return null;\n}\n\nfunction getDday(end) {\n    let today = new Date();\n    let year = today.getFullYear(); // 년도\n    let month = today.getMonth() + 1;  // 월\n    let day = today.getDate();  // 날짜\n\n    var endArray = end.split(\" \");\n    var end_date = endArray[0];\n    var dateArray = end_date.split(\"-\");\n\n    if(year == dateArray[0]) {\n        if(month == dateArray[1]) {\n            if(dateArray[2] - day <= 7) {\n                return dateArray[2] - day;\n            }\n        }\n    }\n\n    return null;\n}\n\n/* GET index listing. */\nrouter.get(\"/\", function (req, res, next) {\n    res.render(\"index\", { title: \"Index\" });\n});\n\nrouter.get(\"/signup\", catchErrors(async (req, res, next) => {\n    const skills = await Skill.findAll();\n    res.render(\"signup\", {skills: skills});\n}));\n\nrouter.get(\"/mypage\", async (req, res) => {\n    if (!req.session.authorization) res.json({ message: \"you should login\" });\n    const user = await Employee.findOne({\n        where: { authorization_no: req.session.authorization },\n    });\n    const { id, pwd, education, name, work_experience, emp_no } = user;\n    const userSkills = await Skill.findAll({\n        include: [\n            {\n                model: EmpSkill,\n                where: [`emp_no = ${emp_no}`],\n            },\n        ],\n        attributes: [\"skill_name\"],\n    });\n    res.json({\n        id,\n        pwd,\n        education,\n        skill: userSkills,\n        name,\n        work_experience,\n    });\n});\n\nrouter.route(\"/signin\")\n    .get((req, res) => {\n        res.render(\"signin\", {});\n    })\n\n    .post(\n        catchErrors(async (req, res, next) => {\n            console.log(req.body);\n\n            const user = await Employee.findOne({ where: { ID: req.body.id } });\n            if (!user) {\n                req.flash(\"danger\", \"존재하지 않는 ID 입니다.\");\n                return res.redirect(\"back\");\n            }\n\n            const projects = await Project.findAll({\n                where: {\n                    state: '진행중'\n                },\n                include: [\n                    {    \n                        model: Employee,\n                        as: 'project_emp',\n                        through: {\n                            where: { emp_no: user.emp_no }\n                        }\n                    }\n                ]\n            });\n\n            for(let project of projects) {\n                var d_day = getDday(project.dataValues.end_date);\n                if(d_day) {\n                    req.flash(\"warning\", `${project.project_name} 프로젝트의 마감일자까지 ${d_day}일 남았습니다.`);\n                }\n            }\n            \n            req.session.user = user;\n            req.session.authorization = user.authorization_no;\n            req.flash(\"success\", `${user.name}님 환영합니다!`);\n            return res.redirect(\"/\");\n        })\n    );\n\nrouter.post(\"/signup\", catchErrors(async (req, res, next) => {\n    console.log(req.body);\n\n    var err = validateForm(req.body);\n    if (err) {\n        req.flash(\"danger\", err);\n        return res.redirect(\"back\");\n    }\n\n    var user = await Employee.findOne({ where: {ID: req.body.id} });\n\n    if (user) {\n        req.flash(\"danger\", \"이미 존재하는 ID 입니다.\");\n        return res.redirect(\"back\");\n    }\n\n    var password = await generateHash(req.body.password);\n\n    user = await Employee.create({\n        name: req.body.name,\n        ID: req.body.id,\n        PWD: password,\n        dept_no: req.body.department,\n        authorization_no: null,\n        education: req.body.education,\n        work_experience: null\n    });\n\n    for(let skill of req.body.skills) {\n        await EmpSkill.create({\n            emp_no: user.emp_no,\n            skill_no: skill\n        });\n    }\n\n    req.flash(\"success\", \"정상적으로 회원가입되었습니다.\");\n    res.redirect(\"/\");\n}));\n\nrouter.get(\"/signout\", (req, res, next) => {\n    delete req.session.user;\n    req.flash(\"success\", \"정상적으로 로그아웃 되었습니다.\");\n    res.redirect(\"/\");\n});\n\nrouter.get(\"/test\", function (req, res, next) {\n    res.render(\"index2\", { title: \"Express\", name: \"han sh\" });\n});\n/*회원가입 화면*/\nrouter.get(\"/test3\", function (req, res, next) {\n    res.render(\"signup\", { title: \"Express\" });\n});\n\n/*nav_개발자*/\nrouter.get(\"/nav_developer\", function (req, res, next) {\n    res.render(\"nav_develop\", { title: \"Express\" });\n});\n\n/*nav_경영진*/\nrouter.get(\"/nav_management\", function (req, res, next) {\n    res.render(\"nav_management\", { title: \"Express\" });\n});\n\n/*프로젝트 등록 페이지*/\nrouter.get(\"/addproject\", function (req, res, next) {\n    res.render(\"addProject\", { title: \"Express\" });\n});\n\n/*마이페이지*/\nrouter.get(\"/mypage\", function (req, res, next) {\n    res.render(\"mypage/mypageview\", { title: \"Express\" });\n});\n\n/*개인정보 수정*/\nrouter.get(\"/myprofileedit\", function (req, res, next) {\n    res.render(\"mypage/myProfileEdit\", { title: \"Express\" });\n});\n\n/*고객평가 해당 직원 리스트 페이지*/\nrouter.get('/evaluation/customer_evaluation', function(req, res, next){\n  res.render('evaluation/customer_evaluation', { title: 'Express' });\n});\n\n/*고객평가 입력페이지*/\nrouter.get('/evaluation/inputCustomer_evaluation', function(req, res, next){\n  res.render('evaluation/inputCustomer_evaluation', { title: 'Express' });\n});\n\n/*동료평가 해당 직원 리스트 페이지*/\nrouter.get('/evaluation/peer_evaluation', function(req, res, next){\n  res.render('evaluation/peer_evaluation', { title: 'Express' });\n});\n\n/*동료평가 입력페이지*/\nrouter.get('/evaluation/inputPeer_evaluation', function(req, res, next){\n  res.render('evaluation/inputPeer_evaluation', { title: 'Express' });\n});\n\n/*PM평가 해당 직원 리스트 페이지*/\nrouter.get('/evaluation/pm_evaluation', function(req, res, next){\n  res.render('evaluation/pm_evaluation', { title: 'Express' });\n});\n\n/*PM평가 입력페이지*/\nrouter.get('/evaluation/inputPm_evaluation', function(req, res, next){\n  res.render('evaluation/inputPm_evaluation', { title: 'Express' });\n});\n\n/*고객평가 해당 직원 리스트 페이지*/\nrouter.get('/evaluation/customer_evaluation', function(req, res, next){\n  res.render('evaluation/customer_evaluation', { title: 'Express' });\n});\n\n/*고객평가 입력페이지*/\nrouter.get('/evaluation/inputCustomer_evaluation', function(req, res, next){\n  res.render('evaluation/inputCustomer_evaluation', { title: 'Express' });\n});\n\n/*고객평가서 항목 수정페이지*/\nrouter.get('/evaluation/modification_customerEval', function(req, res, next){\n    res.render('evaluation/modification_customerEval', { title: 'Express' });\n  });\n\n/*업무능력서 항목 수정페이지*/\nrouter.get('/evaluation/modification_peerEval', function(req, res, next){\n    res.render('evaluation/modification_peerEval', { title: 'Express' });\n  });\n\n/*특정직원의 동료,pm,peer평가 결과(점수,합계,평균)를 확인하는 페이지*/\nrouter.get('/management/evaluationResult_inquiry', function(req, res, next){\n    res.render('management/evaluationResult_inquiry', { title: 'Express' });\n  });\n\n/*특정직원의 고객평가 상세결과 페이지*/\nrouter.get('/evaluation/resultCustomer_eval', function(req, res, next){\n    res.render('evaluation/resultCustomer_eval', { title: 'Express' });\n  });\n\n/*특정직원의 PM평가 상세결과 페이지*/\nrouter.get('/evaluation/resultPm_eval', function(req, res, next){\n    res.render('evaluation/resultPm_eval', { title: 'Express' });\n  });\n\n/*특정직원의 동료평가 상세결과 페이지*/\nrouter.get('/evaluation/resultPeer_eval', function(req, res, next){\n    res.render('evaluation/resultPeer_eval', { title: 'Express' });\n  });\n\n/*project list*/\nrouter.get(\"/project/list\", function (req, res, next) {\n    res.render(\"project/list\", { title: \"Express\" });\n});\n\n/*project create*/\nrouter.get(\"/project/new\", function (req, res, next) {\n    res.render(\"project/new\", { title: \"Express\" });\n});\n\n/*project details*/\nrouter.get(\"/project/details\", function (req, res, next) {\n    res.render(\"project/details\", { title: \"Express\" });\n});\n\n/*project modify*/\nrouter.get(\"/project/modify\", function (req, res, next) {\n    res.render(\"project/modify\", { title: \"Express\" });\n});\n\n/*add Client*/\nrouter.get(\"/addclient\", function (req, res, next) {\n    res.render(\"addclient\", { title: \"Express\" });\n});\n\nmodule.exports = router;\n"]}